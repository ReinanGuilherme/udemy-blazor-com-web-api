@using PrimeiroAppBlazor.Library
@using PrimeiroAppBlazor.Client.Services
@inject CursoServices cursoService;
@inject CarreraService carreraService;

<EditForm Model="@cursoCLS" OnValidSubmit="Guardar">
	<DataAnnotationsValidator/>
	<div class="mt-3">
		<label>Id Curso</label>
		<InputNumber class="form-control" @bind-Value="@cursoCLS.idcurso"/>
	</div>
	
	<div class="mt-3">
		<label>Nombre Curso</label>
		<InputText class="form-control" @bind-Value="@cursoCLS.nombrecurso"/>
		<ValidationMessage For="(()=>cursoCLS.nombrecurso)"/>
	</div>
	
	<div class="mt-3">
		<label>Numero Creditos</label>
		<InputNumber class="form-control" @bind-Value="@cursoCLS.numerocreditos" />
		<ValidationMessage For="(()=>cursoCLS.numerocreditos)" />
	</div>

	<div class="mt-3">
		<label>Sellecione Carrera</label>
		<InputSelect @bind-Value="@cursoCLS.idcarrera" class="form-control">
			<option value="0">Selecione</option>
			@foreach (var carrera in listaCarrera)
			{
				<option value="@carrera.idcarrera">@carrera.nombrecarrera</option>
			}
		</InputSelect>
		<ValidationMessage For="(()=>cursoCLS.idcarrera)" />
	</div>

	<div class="mt-3">
		<button class="btn btn-primary" type="submit">Guardar</button>
		<button class="btn btn-secondary" type="button" @onclick="(()=>Limpiar())">Limpiar</button>
	</div>
</EditForm>

@code {
	public CursoCLS cursoCLS = new CursoCLS();
	public List<CarreraCLS> listaCarrera { get; set; }

	protected override async Task OnInitializedAsync()
	{
		cursoService.OnEdit += RecuperarCurso;
		listaCarrera = carreraService.listarCarreras();
		await Task.CompletedTask;
	}

	public async Task Guardar()
	{
		cursoService.Agregar(cursoCLS);
		cursoCLS = new CursoCLS();
		await Task.CompletedTask;
	}

	public async Task Limpiar()
	{
		cursoCLS = new CursoCLS();
		await Task.CompletedTask;
	}

	public async Task RecuperarCurso(CursoCLS cursoRecuperadoClS)
	{
		cursoCLS = cursoRecuperadoClS;
		StateHasChanged();
		await Task.CompletedTask;
	}
}
