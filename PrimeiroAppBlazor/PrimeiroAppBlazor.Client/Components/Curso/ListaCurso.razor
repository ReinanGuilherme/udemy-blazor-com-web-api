@using PrimeiroAppBlazor.Library
@using PrimeiroAppBlazor.Client.Services
@inject CursoService cursoService;

<h3>ListCurso</h3>

@if (lista is null)
{
	<h1>Carregando...</h1>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Nombre</th>
				<th>Creditos</th>
				<th>Operaciones</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var curso in lista)
			{
				<tr>
					<td>@curso.idcurso</td>
					<td>@curso.nombrecurso</td>
					<td>@curso.numerocreditos</td>
					<td>
						<button class="btn btn-primary" @onclick="(()=>Editar(curso))">Eliminar</button>

						<button class="btn btn-danger" @onclick="(()=>Eliminar(curso.idcurso))">Eliminar</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	public List<CursoCLS> lista { get; set; }

	protected override async Task OnInitializedAsync()
	{
		lista = cursoService.ListarCursos();
		cursoService.OnChange += RefrezcarLista;
		cursoService.OnSearch += BuscarCursos;
		await Task.CompletedTask;
	}

	public async Task RefrezcarLista()
	{
		lista = cursoService.ListarCursos();
		StateHasChanged();
		await Task.CompletedTask;
	}

	public async Task Eliminar(int idcurso)
	{
		cursoService.Eliminar(idcurso);
		await Task.CompletedTask;
	}

	public async Task Editar(CursoCLS curso)
	{
		cursoService.NotificarEditar(curso);
		await Task.CompletedTask;
	}
	
	public async Task BuscarCursos(CursoCLS curso)
	{
		cursoService.BuscarCursos(curso);
		StateHasChanged();
		await Task.CompletedTask;
	}
}
