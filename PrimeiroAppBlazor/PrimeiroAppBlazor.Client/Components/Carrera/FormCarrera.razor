@using PrimeiroAppBlazor.Library
@using PrimeiroAppBlazor.Client.Services
@inject CarreraService carreraService;

<EditForm Model="@carreraCLS" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator />
    <div class="mt-3">
        <label>Ingresse Id</label>
        <InputNumber class="form-control" @bind-Value="carreraCLS.idcarrera" />
    </div>

    <div class="mt-3">
        <label>Ingresse Nombre</label>
        <InputText class="form-control" @bind-Value="carreraCLS.nombrecarrera" />
        <ValidationMessage For="(()=>carreraCLS.nombrecarrera)" />
    </div>

    <div class="mt-3">
        <label>Ingresse Descripcion</label>
        <InputTextArea class="form-control" @bind-Value="carreraCLS.descripcioncarrera" />
        <ValidationMessage For="(()=>carreraCLS.descripcioncarrera)" />
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="(()=>Limpiar())" type="button">Limpiar</button>
    </div>
    
    <div class="mt-3">
        <button class="btn btn-primary" type="submit">Guardar</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<CarreraCLS> OnGuardar { get; set; }

    public CarreraCLS carreraCLS { get; set; } = new CarreraCLS();

    protected override async Task OnInitializedAsync()
    {
        carreraService.onEdit += recuperarCarrera;
        await Task.CompletedTask;
        
    }

    private async Task Guardar()
    {
        carreraService.agregar(carreraCLS);
        carreraCLS = new CarreraCLS();
        await Task.CompletedTask;
    }
    
    private async Task Limpiar()
    {
        carreraCLS = new CarreraCLS();
        await Task.CompletedTask;
    }

    private async Task recuperarCarrera(CarreraCLS carreraRecuperar)
    {
        carreraCLS = carreraRecuperar;
        StateHasChanged();
        await Task.CompletedTask;
    }

}
